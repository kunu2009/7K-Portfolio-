#!/usr/bin/env node

/**
 * Script to convert STAN-AI-COMPLETE-CONTEXT.md into TypeScript knowledge base
 * Run: node scripts/generate-knowledge-base.js
 */

const fs = require('fs');
const path = require('path');

function extractQuestionsFromMarkdown(markdownContent) {
  const questions = [];
  const lines = markdownContent.split('\n');
  
  let currentCategory = '';
  let inQASection = false;
  
  for (let i = 0; i < lines.length; i++) {
    const line = lines[i].trim();
    
    // Detect category headers
    if (line.startsWith('### **Category')) {
      const categoryMatch = line.match(/Category \d+: (.+?) \(/);
      if (categoryMatch) {
        currentCategory = categoryMatch[1].toLowerCase().replace(/\s+/g, '_').replace(/&/g, 'and');
        inQASection = true;
      }
      continue;
    }
    
    // Detect question
    const questionMatch = line.match(/^\*\*Q(\d+): (.+?)\*\*/);
    if (questionMatch && inQASection) {
      const questionNumber = parseInt(questionMatch[1]);
      const question = questionMatch[2];
      
      // Look for answer on next line(s)
      let answer = '';
      let j = i + 1;
      while (j < lines.length && lines[j].trim().startsWith('A: ')) {
        answer += lines[j].trim().substring(3) + ' ';
        j++;
      }
      
      if (answer) {
        questions.push({
          question,
          answer: answer.trim(),
          category: currentCategory,
          questionNumber
        });
      }
    }
  }
  
  return questions;
}

function generateKeywords(question) {
  const commonWords = ['is', 'are', 'the', 'what', 'how', 'can', 'does', 'do', 'tell', 'me', 'about', 'a', 'an', 'of', 'to', 'in'];
  const words = question.toLowerCase()
    .replace(/[?!.,]/g, '')
    .split(' ')
    .filter(word => word.length > 2 && !commonWords.includes(word));
  
  return [...new Set(words)].slice(0, 10);
}

function generatePatterns(question) {
  const patterns = [];
  
  // Main question pattern
  let cleanQuestion = question.toLowerCase()
    .replace(/\?/g, '')
    .replace(/kunal'?s?/gi, '(kunal|his|kunal.*s)')
    .replace(/[^\w\s()]/g, '');
  
  patterns.push(`/${cleanQuestion}/i`);
  
  // Add pattern variations
  if (question.includes('What is') || question.includes("What's")) {
    const variant = cleanQuestion.replace('what is', '(what is|tell me about|explain|describe)');
    patterns.push(`/${variant}/i`);
  }
  if (question.includes('Tell me')) {
    const variant = cleanQuestion.replace('tell me', '(tell me|what|describe)');
    patterns.push(`/${variant}/i`);
  }
  if (question.includes('How')) {
    const variant = cleanQuestion.replace('how', '(how|explain how|tell me how)');
    patterns.push(`/${variant}/i`);
  }
  
  return patterns;
}

function escapeString(str) {
  return str
    .replace(/\\/g, '\\\\')
    .replace(/"/g, '\\"')
    .replace(/\n/g, '\\n')
    .replace(/\r/g, '\\r')
    .replace(/\t/g, '\\t');
}

function generateTypeScriptKnowledgeBase(questions) {
  let output = `/**
 * Stan AI Knowledge Base - AUTO-GENERATED
 * ${questions.length}+ preloaded Q&A about Kunal Chheda and the 7K Ecosystem
 * Generated from STAN-AI-COMPLETE-CONTEXT.md
 * Last Updated: ${new Date().toLocaleDateString()}
 * 
 * ‚ö†Ô∏è DO NOT EDIT THIS FILE MANUALLY
 * Run: node scripts/generate-knowledge-base.js to regenerate
 */

export type KnowledgeEntry = {
  keywords: string[];
  patterns: RegExp[];
  answer: string;
  category: string;
  priority?: number;
  questionId: number;
};

export const STAN_KNOWLEDGE: KnowledgeEntry[] = [\n`;

  questions.forEach((qa, index) => {
    const keywords = generateKeywords(qa.question);
    const patterns = generatePatterns(qa.question);
    const answer = escapeString(qa.answer);
    
    // Calculate priority based on category and position
    let priority = 5;
    if (qa.category.includes('personal')) priority = 10;
    else if (qa.category.includes('skills') || qa.category.includes('7k_ecosystem')) priority = 9;
    else if (index < 100) priority = 8;
    else if (index < 300) priority = 7;
    else priority = 6;
    
    output += `  // Q${qa.questionNumber}: ${qa.question}\n`;
    output += `  {\n`;
    output += `    keywords: ${JSON.stringify(keywords)},\n`;
    output += `    patterns: [${patterns.join(', ')}],\n`;
    output += `    answer: "${answer}",\n`;
    output += `    category: "${qa.category}",\n`;
    output += `    questionId: ${qa.questionNumber},\n`;
    output += `    priority: ${priority}\n`;
    output += `  },\n\n`;
  });

  output += `];\n\n`;
  
  // Add fun facts
  output += `export const FUN_FACTS = [
  "Kunal built 24+ apps while still being in 12th standard! Talk about productivity! üöÄ",
  "The 7K Ecosystem started as personal tools Kunal needed himself‚Äînow they're helping others too!",
  "Kunal is balancing being a 12th grader, a developer, AND preparing to be a lawyer. Triple threat! ‚öñÔ∏èüíªüìö",
  "This entire portfolio has 28+ different design variations across 7 categories!",
  "Kunal loves chess (1300+ rating) because it teaches strategic thinking‚Äîsuper useful for both coding and law!",
  "7K Life integrates productivity, habits, goals, and life management all in one place!",
  "Kunal believes in 'Radical Productivity'‚Äîtools that amplify focus and eliminate friction!",
  "The Terminal portfolio actually works like a real CLI! You can type commands and explore interactively!",
  "Kunal taught himself React, Next.js, TypeScript, and more‚Äîall while studying for school exams!",
  "Kunal is learning 6+ languages simultaneously as a polyglot in progress!",
  "Kunal achieved 95+ Lighthouse scores on all his applications through meticulous optimization!",
  "The 7K ecosystem has 24+ apps spanning productivity, education, finance, health, and entertainment!",
  "Kunal completed an e-commerce website (GiftsKraftByGK.in) for his first client project!",
  "7K Polyglot supports 20+ languages with AI conversation practice and comparative learning!",
  "Kunal's portfolio includes playable games like Snake, Tetris, and Memory Match!",
  "Every app follows three principles: Radical Productivity, Continuous Growth, and Creative Freedom!",
  "Stan AI (that's me!) will soon work completely offline with local AI models!",
  "Kunal's vision includes interconnecting all 7K apps with unified authentication and shared data!",
  "The Arcade portfolio is the only portfolio where you can actually play games while learning about the developer!",
  "7K LawPrep is specifically designed for law aspirants preparing for CLAT and MHCET exams!"
];\n\n`;

  // Add category export
  output += `export const KNOWLEDGE_CATEGORIES = ${JSON.stringify([...new Set(questions.map(q => q.category))], null, 2)};\n\n`;
  
  // Add stats
  output += `export const KNOWLEDGE_STATS = {
  totalQuestions: ${questions.length},
  categories: ${[...new Set(questions.map(q => q.category))].length},
  lastGenerated: "${new Date().toISOString()}",
  version: "2.0"
};\n`;

  return output;
}

// Main execution
function main() {
  console.log('ü§ñ Stan AI Knowledge Base Generator');
  console.log('=====================================\n');
  
  const contextPath = path.join(process.cwd(), 'STAN-AI-COMPLETE-CONTEXT.md');
  const outputPath = path.join(process.cwd(), 'src', 'lib', 'stan-knowledge-base.ts');
  
  // Check if context file exists
  if (!fs.existsSync(contextPath)) {
    console.error('‚ùå Error: STAN-AI-COMPLETE-CONTEXT.md not found!');
    console.error(`   Looking for: ${contextPath}`);
    process.exit(1);
  }
  
  console.log('üìñ Reading context file...');
  const markdownContent = fs.readFileSync(contextPath, 'utf-8');
  
  console.log('üîç Extracting Q&A pairs...');
  const questions = extractQuestionsFromMarkdown(markdownContent);
  
  if (questions.length === 0) {
    console.error('‚ùå Error: No questions found in context file!');
    process.exit(1);
  }
  
  console.log(`‚úÖ Found ${questions.length} questions!`);
  
  // Group by category
  const categories = {};
  questions.forEach(q => {
    if (!categories[q.category]) categories[q.category] = 0;
    categories[q.category]++;
  });
  
  console.log('\nüìä Questions by category:');
  Object.entries(categories).forEach(([cat, count]) => {
    console.log(`   ${cat}: ${count} questions`);
  });
  
  console.log('\n‚öôÔ∏è  Generating TypeScript knowledge base...');
  const tsContent = generateTypeScriptKnowledgeBase(questions);
  
  console.log('üíæ Writing to file...');
  
  // Ensure directory exists
  const outputDir = path.dirname(outputPath);
  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true });
  }
  
  fs.writeFileSync(outputPath, tsContent, 'utf-8');
  
  console.log(`\nüéâ Success! Generated knowledge base with ${questions.length} Q&A pairs!`);
  console.log(`üìÅ Output: ${outputPath}`);
  console.log('\n‚ú® Stan AI is now loaded with comprehensive knowledge!');
}

if (require.main === module) {
  main();
}

module.exports = { extractQuestionsFromMarkdown, generateTypeScriptKnowledgeBase };
